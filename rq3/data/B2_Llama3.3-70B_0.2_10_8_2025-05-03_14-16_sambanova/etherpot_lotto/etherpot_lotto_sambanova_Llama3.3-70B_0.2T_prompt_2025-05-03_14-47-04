
                    You are an expert assistant specializing in Solidity fuzzing with a deep understanding of SWC and DASP vulnerabilities. 
                    Your objective is to generate a diverse set of transactions and inputs targeting the main EVM/Solidity vulnerabilities.
                    Respond strictly in JSON format, following the provided instructions without any additional text.
                

                
                    ### Is this contract vulnerable to any of Ether Leak, Block State Dependency, Integer underflow/overflow, Mishandled Exception, Reentrancy?
                        (Think step-by-step, write seeds that demonstrates the actual attack vector against this contract and only use contract ABI functions)
                        Do not call private/internal functions directly, when ETH is sent to the contract, use fallback functions that handle incoming funds.                
                        
                        pragma solidity ^0.4.0; contract Lotto { uint constant public blocksPerRound = 6800; uint constant public ticketPrice = 100000000000000000; uint constant public blockReward = 5000000000000000000; function getBlocksPerRound() constant returns(uint){ return blocksPerRound; } function getTicketPrice() constant returns(uint){ return ticketPrice; } struct Round { address[] buyers; uint pot; uint ticketsCount; mapping(uint=>bool) isCashed; mapping(address=>uint) ticketsCountByBuyer; } mapping(uint => Round) rounds; function getRoundIndex() constant returns (uint){ return block.number/blocksPerRound; } function getIsCashed(uint roundIndex,uint subpotIndex) constant returns (bool){ return rounds[roundIndex].isCashed[subpotIndex]; } function calculateWinner(uint roundIndex, uint subpotIndex) constant returns(address){ var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex); if(decisionBlockNumber>block.number) return; var decisionBlockHash = getHashOfBlock(decisionBlockNumber); var winningTicketIndex = decisionBlockHash%rounds[roundIndex].ticketsCount; var ticketIndex = uint256(0); for(var buyerIndex = 0; buyerIndex<rounds[roundIndex].buyers.length; buyerIndex++){ var buyer = rounds[roundIndex].buyers[buyerIndex]; ticketIndex+=rounds[roundIndex].ticketsCountByBuyer[buyer]; if(ticketIndex>winningTicketIndex){ return buyer; } } } function getDecisionBlockNumber(uint roundIndex,uint subpotIndex) constant returns (uint){ return ((roundIndex+1)*blocksPerRound)+subpotIndex; } function getSubpotsCount(uint roundIndex) constant returns(uint){ var subpotsCount = rounds[roundIndex].pot/blockReward; if(rounds[roundIndex].pot%blockReward>0) subpotsCount++; return subpotsCount; } function getSubpot(uint roundIndex) constant returns(uint){ return rounds[roundIndex].pot/getSubpotsCount(roundIndex); } function cash(uint roundIndex, uint subpotIndex){ var subpotsCount = getSubpotsCount(roundIndex); if(subpotIndex>=subpotsCount) return; var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex); if(decisionBlockNumber>block.number) return; if(rounds[roundIndex].isCashed[subpotIndex]) return; var winner = calculateWinner(roundIndex,subpotIndex); var subpot = getSubpot(roundIndex); winner.send(subpot); rounds[roundIndex].isCashed[subpotIndex] = true; } function getHashOfBlock(uint blockIndex) constant returns(uint){ return uint(block.blockhash(blockIndex)); } function getBuyers(uint roundIndex,address buyer) constant returns (address[]){ return rounds[roundIndex].buyers; } function getTicketsCountByBuyer(uint roundIndex,address buyer) constant returns (uint){ return rounds[roundIndex].ticketsCountByBuyer[buyer]; } function getPot(uint roundIndex) constant returns(uint){ return rounds[roundIndex].pot; } function() payable { var roundIndex = getRoundIndex(); var value = msg.value-(msg.value%ticketPrice); if(value==0) return; if(value<msg.value){ msg.sender.send(msg.value-value); } var ticketsCount = value/ticketPrice; rounds[roundIndex].ticketsCount+=ticketsCount; if(rounds[roundIndex].ticketsCountByBuyer[msg.sender]==0){ var buyersLength = rounds[roundIndex].buyers.length++; rounds[roundIndex].buyers[buyersLength] = msg.sender; } rounds[roundIndex].ticketsCountByBuyer[msg.sender]+=ticketsCount; rounds[roundIndex].ticketsCount+=ticketsCount; rounds[roundIndex].pot+=value; } }                        
                

                    ### You have four sender contracts: SmartianAgent1, SmartianAgent2, SmartianAgent3, and SmartianAgent4. Use their names in the parameters that need an address and in From fields as needed.
                

                    ### Available Contract Functions (You must only use the functions in this list for Test Case Generation):

                    getPot(uint256)
getTicketsCountByBuyer(uint256,address)
getIsCashed(uint256,uint256)
getBuyers(uint256,address)
getSubpotsCount(uint256)
calculateWinner(uint256,uint256)
getHashOfBlock(uint256)
getSubpot(uint256)
cash(uint256,uint256)
getDecisionBlockNumber(uint256,uint256)
fallback()
                

                    ### JSON Grammar for EVM Test Case

                    #### Root
                    - An array of `TestCase` objects.

                    #### TestCase
                    - **DeployTx**: An object representing the deployment transaction, using the constructor function.
                    - **Txs**: An array of transaction (`Tx`) objects.

                    #### DeployTx
                    - **From**: A string representing the deployer's name or address.
                    - **Value**: A string representing the amount of Ether sent with the transaction.
                    - **Function**: A string representing the constructor function name being called.
                    - **Params** (optional): An array representing the parameters passed to the constructor, if it exists.
                    - **Timestamp**: A string representing the timestamp of the transaction.
                    - **Blocknum**: A string representing the block number when the transaction was included.

                    #### Tx (Transaction)
                    - **From**: A string representing the sender's name.
                    - **Value**: A string representing the amount of Ether sent with the transaction, if function is payable.
                    - **Function**: A string representing the function name being called.
                    - **Params** (optional): An array representing the parameters passed to the function.
                    - Parameters can be nested arrays.
                    - **Timestamp**: A string representing the timestamp of the transaction.
                    - **Blocknum**: A string representing the block number when the transaction was included.
                

### Example 
```json
[
    {
        "TestCase": {
            "DeployTx": {
                "From": "SmartianAgent1",
                "Value": "0",
                "Function": "constructor",
                "Params": [],
                "Timestamp": "10000000",
                "Blocknum": "20000000"
            },
            "Txs": [
                {
                    "From": "SmartianAgent1",
                    "Value": "0",
                    "Function": "caddress",
                    "Timestamp": "10000141",
                    "Blocknum": "20000198"
                },
                {
                    "From": "SmartianAgent1",
                    "Value": "0",
                    "Function": "from",
                    "Params": [
                        "SmartianAgent2"
                    ],
                    "Timestamp": "10000151",
                    "Blocknum": "20000144"
                },
                {
                    "From": "SmartianAgent2",
                    "Value": "1",
                    "Function": "transfer",
                    "Params": [
                        [
                            "0x0000000000000000000000000000000000000001"
                        ],
                        [
                            "1"
                        ]
                    ],
                    "Timestamp": "10000161",
                    "Blocknum": "20000150"
                },
                {
                    "From": "SmartianAgent1",
                    "Value": "0",
                    "Function": "from",
                    "Params": [
                        "0x0000000000000000000000000000000000000002"
                    ],
                    "Timestamp": "10000171",
                    "Blocknum": "20000156"
                },
                {
                    "From": "SmartianAgent4",
                    "Value": "2",
                    "Function": "transfer",
                    "Params": [
                        [
                            "0x0000000000000000000000000000000000000001",
                            "0x0000000000000000000000000000000000000002"
                        ],
                        [
                            "2",
                            "3"
                        ]
                    ],
                    "Timestamp": "10000181",
                    "Blocknum": "20000162"
                }
            ]
        }
    }
]
```

                
                    ### Notes
                    - Each `TestCase` contains a `DeployTx` object and an array of `Tx` objects.
                    - Each transaction (`Tx`) includes details such as sender (`From`), value (`Value`), function name (`Function`), optional parameters (`Params`), timestamp (`Timestamp`), and block number (`Blocknum`).
                    - Parameters (`Params`) can be nested arrays to accommodate functions requiring multiple lists of parameters.
                    - Do not call internal functions directly.
                    
                    ### Objective
                    Create 10 new test case objects, each containing more than 8 transactions that might uncover bugs in the contract.
                    Ensure the transactions use raw values and respect the data types in the function signatures and consider functions modifiers in your transactions.
                    Provide the response as RFC8259 compliant JSON without explanations.
                