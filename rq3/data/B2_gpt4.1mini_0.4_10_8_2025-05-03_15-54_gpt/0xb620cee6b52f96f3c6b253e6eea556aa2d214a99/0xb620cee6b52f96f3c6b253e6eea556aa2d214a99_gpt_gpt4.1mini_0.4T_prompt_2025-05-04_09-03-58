
                    You are an expert assistant specializing in Solidity fuzzing with a deep understanding of SWC and DASP vulnerabilities. 
                    Your objective is to generate a diverse set of transactions and inputs targeting the main EVM/Solidity vulnerabilities.
                    Respond strictly in JSON format, following the provided instructions without any additional text.
                

                
                    ### Is this contract vulnerable to any of Ether Leak, Block State Dependency, Integer underflow/overflow, Mishandled Exception, Reentrancy?
                        (Think step-by-step, write seeds that demonstrates the actual attack vector against this contract and only use contract ABI functions)
                        Do not call private/internal functions directly, when ETH is sent to the contract, use fallback functions that handle incoming funds.                
                        
                        pragma solidity ^0.4.23; contract DrainMe { address public winner = 0x0; address public owner; address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b; address public secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766; address[] public players; mapping(address=>bool) approvedPlayers; uint256 public secret; uint256[] public seed = [951828771,158769871220]; uint256[] public balance; function DranMe() public payable{ owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } modifier onlyWinner() { require(msg.sender == winner); _; } modifier onlyPlayers() { require(approvedPlayers[msg.sender]); _; } function getLength() public constant returns(uint256) { return seed.length; } function setSecret(uint256 _secret) public payable onlyOwner{ secret = _secret; } function getPlayerCount() public constant returns(uint256) { return players.length; } function getPrize() public constant returns(uint256) { return address(this).balance; } function becomePlayer() public payable{ require(msg.value >= 0.02 ether); players.push(msg.sender); approvedPlayers[msg.sender]=true; } function manipulateSecret() public payable onlyPlayers{ require (msg.value >= 0.01 ether); if(msg.sender!=owner || unlockSecret()){ uint256 amount = 0; msg.sender.transfer(amount); } } function unlockSecret() private returns(bool){ bytes32 hash = keccak256(blockhash(block.number-1)); uint256 secret = uint256(hash); if(secret%5==0){ winner = msg.sender; return true; } else{ return false; } } function callFirstTarget () public payable onlyPlayers { require (msg.value >= 0.005 ether); firstTarget.call.value(msg.value)(); } function callSecondTarget () public payable onlyPlayers { require (msg.value >= 0.005 ether); secondTarget.call.value(msg.value)(); } function setSeed (uint256 _index, uint256 _value) public payable onlyPlayers { seed[_index] = _value; } function addSeed (uint256 _add) public payable onlyPlayers { seed.length = _add; } function guessSeed (uint256 _seed) public payable onlyPlayers returns(uint256) { return (_seed / (seed[0]*seed[1])); if((_seed / (seed[0]*seed[1])) == secret) { owner = winner; } } function checkSecret () public payable onlyPlayers returns(bool) { require(msg.value >= 0.01 ether); if(msg.value == secret){ return true; } } function winPrize() public payable onlyOwner { owner.call.value(1 wei)(); } function claimPrize() public payable onlyWinner { winner.transfer(address(this).balance); } function() public payable{ } }                        
                

                    ### You have four sender contracts: SmartianAgent1, SmartianAgent2, SmartianAgent3, and SmartianAgent4. Use their names in the parameters that need an address and in From fields as needed.
                

                    ### Available Contract Functions (You must only use the functions in this list for Test Case Generation):

                    callFirstTarget() payable 
callSecondTarget() payable 
setSeed(uint256,uint256) payable 
DranMe() payable 
checkSecret() payable 
setSecret(uint256) payable 
balance(uint256)
becomePlayer() payable 
manipulateSecret() payable 
claimPrize() payable 
seed(uint256)
winPrize() payable 
guessSeed(uint256) payable 
addSeed(uint256) payable 
players(uint256)
fallback()
                

                    ### JSON Grammar for EVM Test Case

                    #### Root
                    - An array of `TestCase` objects.

                    #### TestCase
                    - **DeployTx**: An object representing the deployment transaction, using the constructor function.
                    - **Txs**: An array of transaction (`Tx`) objects.

                    #### DeployTx
                    - **From**: A string representing the deployer's name or address.
                    - **Value**: A string representing the amount of Ether sent with the transaction.
                    - **Function**: A string representing the constructor function name being called.
                    - **Params** (optional): An array representing the parameters passed to the constructor, if it exists.
                    - **Timestamp**: A string representing the timestamp of the transaction.
                    - **Blocknum**: A string representing the block number when the transaction was included.

                    #### Tx (Transaction)
                    - **From**: A string representing the sender's name.
                    - **Value**: A string representing the amount of Ether sent with the transaction, if function is payable.
                    - **Function**: A string representing the function name being called.
                    - **Params** (optional): An array representing the parameters passed to the function.
                    - Parameters can be nested arrays.
                    - **Timestamp**: A string representing the timestamp of the transaction.
                    - **Blocknum**: A string representing the block number when the transaction was included.
                

### Example 
```json
[
    {
        "TestCase": {
            "DeployTx": {
                "From": "SmartianAgent1",
                "Value": "0",
                "Function": "constructor",
                "Params": [],
                "Timestamp": "10000000",
                "Blocknum": "20000000"
            },
            "Txs": [
                {
                    "From": "SmartianAgent1",
                    "Value": "0",
                    "Function": "caddress",
                    "Timestamp": "10000141",
                    "Blocknum": "20000198"
                },
                {
                    "From": "SmartianAgent1",
                    "Value": "0",
                    "Function": "from",
                    "Params": [
                        "SmartianAgent2"
                    ],
                    "Timestamp": "10000151",
                    "Blocknum": "20000144"
                },
                {
                    "From": "SmartianAgent2",
                    "Value": "1",
                    "Function": "transfer",
                    "Params": [
                        [
                            "0x0000000000000000000000000000000000000001"
                        ],
                        [
                            "1"
                        ]
                    ],
                    "Timestamp": "10000161",
                    "Blocknum": "20000150"
                },
                {
                    "From": "SmartianAgent1",
                    "Value": "0",
                    "Function": "from",
                    "Params": [
                        "0x0000000000000000000000000000000000000002"
                    ],
                    "Timestamp": "10000171",
                    "Blocknum": "20000156"
                },
                {
                    "From": "SmartianAgent4",
                    "Value": "2",
                    "Function": "transfer",
                    "Params": [
                        [
                            "0x0000000000000000000000000000000000000001",
                            "0x0000000000000000000000000000000000000002"
                        ],
                        [
                            "2",
                            "3"
                        ]
                    ],
                    "Timestamp": "10000181",
                    "Blocknum": "20000162"
                }
            ]
        }
    }
]
```

                
                    ### Notes
                    - Each `TestCase` contains a `DeployTx` object and an array of `Tx` objects.
                    - Each transaction (`Tx`) includes details such as sender (`From`), value (`Value`), function name (`Function`), optional parameters (`Params`), timestamp (`Timestamp`), and block number (`Blocknum`).
                    - Parameters (`Params`) can be nested arrays to accommodate functions requiring multiple lists of parameters.
                    - Do not call internal functions directly.
                    
                    ### Objective
                    Create 10 new test case objects, each containing more than 8 transactions that might uncover bugs in the contract.
                    Ensure the transactions use raw values and respect the data types in the function signatures and consider functions modifiers in your transactions.
                    Provide the response as RFC8259 compliant JSON without explanations.
                